#!/bin/bash

#############################################################################
## Author:       Jonathan Garzon
## Description:  Gather ML debug info
#############################################################################

# Usage
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This tool can be run directly from github using the following syntax:
#    bash <(curl -s https://raw.github.com/jocisco/ml/master/ml_debug) print 
#    bash <(curl -s https://raw.github.com/jocisco/ml/master/ml_debug) tar 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Parameters
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NUMBER_OF_LOG_LINES=10000 # number of lines captured from log files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Check if $CARIDEN_ROOT is defined
[ -z $CARIDEN_ROOT ] && CARIDEN_ROOT="-undefined-"

# Determining package location
PACKAGE_DIR=`which license_check | sed 's/\(.*\)\/bin\/license_check/\1/'`

# Returns the path to a particular MATE config file
# Requires $CARIDEN_ROOT and $PACKAGE_DIR to be set
function mate_path {
	for path in "$HOME/.cariden" "$CARIDEN_ROOT" "$PACKAGE_DIR" ;
	do
		[ -f $path/$1 ] && { echo "$path/$1"; break; }
	done
}

# Discover MATE environment
function discover_mate_env {
	# Determining ml.conf location
	MLCONF=`mate_path etc/matelive/ml.conf`

	# Determining MLData and Datastore locations
	MLDATA=`cat $MLCONF | grep -v '^#' | grep MLData= | cut -f2 -d'='`
	MLDB=`cat $MLCONF | grep -v '^#' | grep Datastore= | cut -f2 -d'='`
	if [[ ! $MLDB && $MLDATA ]]; then
		MLDB=$MLDATA/datastore
	fi
}

# Print discovered MATE environment
function print_discovered_mate_env {
	echo "---------- Discovered Parameters ----------"
	printf "%-15s = %s %s\n" "CARIDEN_ROOT" $CARIDEN_ROOT
	printf "%-15s = %s %s\n" "PACKAGE_DIR" $PACKAGE_DIR
	printf "%-15s = %s\n" "ml.conf" $MLCONF
	printf "%-15s = %s\n" "MLDATA" $MLDATA
	printf "%-15s = %s\n" "MLDB" $MLDB
	echo "-------------------------------------------"
}

# Discover MATE environment
discover_mate_env

# Printing usage if no arguments
if [[ "$1" != "tar" ]] && [[ "$1" != "print" ]]; then
	echo Usage: 
	echo "   ml_debug print : print some debug info"
	echo "   ml_debug tar   : create debug tarball"
	echo
	# Print discovered MATE environment
	print_discovered_mate_env
	exit
fi

# Exiting if not able to determine env
if [[ ! $PACKAGE_DIR ]] || [[ ! $MLCONF ]] || [[ ! $MLDATA ]]; then
	echo '### Invalid environment! ###'
	echo
	print_discovered_mate_env
	exit 1
fi

IFS=$'\n'

# List of debug commands to run
COMMANDS_WITH_COMMENTS="
### MATE ###
$PACKAGE_DIR/bin/license_check -version
echo MLDATA=$MLDATA
echo MLDB=$MLDB
$PACKAGE_DIR/bin/license_check 

### System ###
uname -a
/bin/df -h
cat /proc/cpuinfo
cat /proc/meminfo
sar
top -n1 -b
ps aux
lsof -i -P
cat /etc/fstab
whoami
crontab -l
date
uptime

### MLD ###
# Datastore size
du -h $MLDB/*; echo; du -sh $MLDB
# Creation/update times
ml_read -datastore $MLDB sql \"select datetime(MIN(CreationTimestamp)/1000,'unixepoch','UTC') as FirstCreation, datetime(MAX(CreationTimestamp)/1000,'unixepoch','UTC') as LastCreation, datetime(MAX(UpdateTimestamp)/1000,'unixepoch','UTC') as LastUpdate from Interfaces LIMIT 5\"
# Tables size
for table in \`ml_read -datastore $MLDB tables\`; do c=\`ml_read -datastore $MLDB sql \"select count(*) from \$table;\" | tail -n1\`; printf \"%-30s%10d\\n\" \$table \$c; done
# Time to load the interfaces table with last value of time series
time ml_read sql 'select * from Interfaces_Series' 2>&1 | head -500

#### Logs ###
cat $MLCONF | grep -v '^#' | grep -v ^$
cat /opt/cariden/.cariden/etc/matelive/ml.conf | grep -v '^#' | grep -v ^$
tail -n1000 $PACKAGE_DIR/lib/web/apache-tomcat-6.0.35/logs/*
tail -n1000 $MLDB/mld.log
"

# Trimming comments
COMMANDS="`echo "$COMMANDS_WITH_COMMENTS" | grep -v '^#' | grep -v ^$`"

# Create TMPDIR
DATE=`date --utc +%Y%m%d-%H%M` 
HOSTNAME=`hostname`
TMPDIR=`mktemp -d /tmp/ml_debug-$HOSTNAME-$DATE-XXX` 
touch $TMPDIR/debug

# Print discovered MATE environment
print_discovered_mate_env >> $TMPDIR/debug 2>&1

# Display commands to be executed
i=1
echo '*****************************************************' >> $TMPDIR/debug 2>&1
echo '* Commands in this output:                          *' >> $TMPDIR/debug 2>&1
echo '*****************************************************' >> $TMPDIR/debug 2>&1
for command in $COMMANDS; do
	echo CMD$i: $command >> $TMPDIR/debug 2>&1
	i=$((i+1))
done
echo '*****************************************************' >> $TMPDIR/debug 2>&1

# Execute commands
i=1
for command in $COMMANDS; do
	echo ----------------------------------------------------- >> $TMPDIR/debug 2>&1
	echo CMD$i: $command >> $TMPDIR/debug 2>&1
	echo ----------------------------------------------------- >> $TMPDIR/debug 2>&1
	bash -c $command >> $TMPDIR/debug 2>&1
	echo >> $TMPDIR/debug 2>&1
	echo >> $TMPDIR/debug 2>&1
	i=$((i+1))
done
# Print result
if [ "$1" != "tar" ]; then
	cat $TMPDIR/debug
fi

# Build the tar file
if [ "$1" = "tar" ]; then 
	cp $MLDB/mldb $TMPDIR
	tail -$NUMBER_OF_LOG_LINES $MLDB/mld.log > $TMPDIR/last-$NUMBER_OF_LOG_LINES-lines-mldb.log
	mkdir -p $TMPDIR/tomcat/logs
	for file in `ls $PACKAGE_DIR/lib/web/apache-tomcat-6.0.35/logs/*`; do
		tail -$NUMBER_OF_LOG_LINES $file > $TMPDIR/tomcat/logs/last-$NUMBER_OF_LOG_LINES-lines-`basename $file`
	done
	mkdir -p $TMPDIR/tomcat/conf
	cp -r $PACKAGE_DIR/lib/web/apache-tomcat-6.0.35/conf/* $TMPDIR/tomcat/conf

	echo -n "Creating $TMPDIR.tgz... "
	tar cvzf $TMPDIR.tgz -C /tmp/ `basename $TMPDIR` >/dev/null 2>&1
	if [[ $? == 0 ]]; then
		echo Done!
		ls -sh $TMPDIR.tgz
	else
		echo Error!
	fi
fi

# Clean tmp files
rm -rf $TMPDIR
